name "skid4_control"
version "0.1"

using_library 'motor_controller'
import_types_from "base"

task_context "Controller" do
    abstract

    input_port("status_samples", "base/samples/Joints").
        doc("status data of the motor driver")

    output_port("command", "base/commands/Joints").
        doc("output command for the motor drivers. A data connection type is recommended")

    property("left_wheel_names", "std::vector<std::string>")
    property("right_wheel_names", "std::vector<std::string>")
    property("max_torque", "float", -1).
        doc('Maximum allowed torque of the wheels. Value < zero means no limit')
end

# The simplest four-wheel, skid-steering controller you can get
task_context "SimpleController" do
    subclasses "Controller"

    needs_configuration

    property("wheel_radius", "double").
        doc("the radius of a wheel, in meters")
    property("track_width", "double").
        doc("the distance between the two wheels of the same axis, in meters")

    # If no new input commands are received for this time the task stops to write output commands.
    # Default is 0.1 seconds.
    property("cmd_timeout", "base/Time")

    input_port('motion_command', 'base/commands/Motion2D').
        doc('input command in rotation and translation. Requires a data connection type.')

    output_port("status_samples_debug", "base/samples/Joints")

    periodic(0.01)
end

task_context "SoftTurnController" do
    subclasses "Controller"

    needs_configuration

    property("wheel_radius", "double").
        doc("the radius of a wheel, in meters")
    property("track_width", "double").
        doc("the distance between the two wheels of the same axis, in meters")

    property("turnSpeed", "double", 0.8)
    property("translationalSpeed", "double", 0.1)
    property("turnVariance", "double", 0.1)

    property("P", "double", 0.0)
    property("I", "double", 0.0)
    property("D", "double", 0.0)
    property("MinMax", "double", 0.0)
    property("N", "double", 0.0)
    property("B", "double", 1.0)
    property("Tt", "double", -1.0)


    input_port('motion_command', 'base/commands/Motion2D').
        doc('input command in rotation and translation. Requires a data connection type.')
end
